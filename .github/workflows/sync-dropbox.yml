name: Sync Files from Dropbox

on:
  schedule:
    - cron: '0 6 * * *'   # daily at 06:00 UTC (~08:00 Rome)
  workflow_dispatch:

# We push with a PAT, so GITHUB_TOKEN can stay read-only
permissions:
  contents: read

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (main, with PAT)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.PAT }}   # PAT must have Contents: Read & write

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rclone qpdf file

      - name: Define Dropbox source path
        run: echo "SRC_PATH=Website/Documents" >> "$GITHUB_ENV"

      - name: Sync from Dropbox
        env:
          RCLONE_DROPBOX_TOKEN: ${{ secrets.DROPBOX_TOKEN_JSON }}
          RCLONE_DROPBOX_CLIENT_ID: ${{ secrets.DROPBOX_CLIENT_ID }}
          RCLONE_DROPBOX_CLIENT_SECRET: ${{ secrets.DROPBOX_CLIENT_SECRET }}
        run: |
          rclone sync ":dropbox:${SRC_PATH}" "./docs" --fast-list

      # Ensure PDFs are binary (no text filters/diffs)
      - name: Ensure .gitattributes for PDFs
        run: |
          {
            echo "*.pdf binary"
            echo "*.PDF binary"
          } > .gitattributes

      # Normalise PDFs (optional but safe)
      - name: Normalise PDFs
        run: |
          shopt -s nullglob globstar
          for f in docs/**/*.pdf docs/*.pdf docs/**/*.PDF docs/*.PDF; do
            qpdf --linearize "$f" "$f.qpdf" && mv -f "$f.qpdf" "$f"
          done

      - name: Configure git author
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Stage and commit
        run: |
          git add -A docs .gitattributes
          git commit -m "Docs: Auto-sync from Dropbox" || echo "No changes to commit"

      # ðŸ‘‡ Pull remote changes first to avoid 'fetch first' rejection
      - name: Rebase onto latest origin/main
        run: |
          git fetch origin main --depth=1
          git pull --rebase origin main || (echo "::error::Rebase failed (conflict). Resolve manually or switch to PR flow."; exit 1)

      - name: Push to main (with PAT)
        run: git push origin HEAD:main

      # Prove the CV is on the remote branch
      - name: Verify CV on origin/main
        run: |
          git fetch origin main --depth=1
          git cat-file -e origin/main:docs/CV/KimTaveras_CV.pdf || (echo "::error::CV not on remote main"; exit 1)
          echo "OK: CV present on origin/main"
