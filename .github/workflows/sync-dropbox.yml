name: Sync Files from Dropbox

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rclone qpdf file

      # <<< CHANGE THIS to the folder under your *app folder* where the changed file lives
      - name: Define Dropbox source path
        run: echo "SRC_PATH=Website/Documents" >> "$GITHUB_ENV"

      # 1) Prove we're in the right place & the changed file exists remotely
      - name: List remote (recursive) + show hashes
        env:
          RCLONE_DROPBOX_TOKEN: ${{ secrets.DROPBOX_TOKEN_JSON }}
          RCLONE_DROPBOX_CLIENT_ID: ${{ secrets.DROPBOX_CLIENT_ID }}
          RCLONE_DROPBOX_CLIENT_SECRET: ${{ secrets.DROPBOX_CLIENT_SECRET }}
        run: |
          echo "REMOTE TREE (:dropbox:${SRC_PATH})"
          rclone lsf ":dropbox:${SRC_PATH}" -R || (echo "::error::Remote path not found. Fix SRC_PATH (case-sensitive) under your app folder." && exit 1)
          echo "REMOTE HASHES (Dropbox content hash)"
          rclone hashsum dropbox ":dropbox:${SRC_PATH}" -R || true

      # 2) Normal sync (verbose). If rclone thinks files are identical, you will see it.
      - name: Sync (normal, verbose)
        env:
          RCLONE_DROPBOX_TOKEN: ${{ secrets.DROPBOX_TOKEN_JSON }}
          RCLONE_DROPBOX_CLIENT_ID: ${{ secrets.DROPBOX_CLIENT_ID }}
          RCLONE_DROPBOX_CLIENT_SECRET: ${{ secrets.DROPBOX_CLIENT_SECRET }}
        run: |
          rclone sync ":dropbox:${SRC_PATH}" "./docs" --fast-list -vv

      # 3) Show what actually changed in the working tree
      - name: Git status after sync
        run: |
          echo "---- git status ----"
          git status --porcelain=v1
          echo "---- git diff names ----"
          git diff --name-status || true

      # 4) If nothing changed, force re-sync (covers equal size/modtime edge cases)
      - name: Force re-sync if no changes detected
        run: |
          if [ -z "$(git status --porcelain=v1 docs)" ]; then
            echo "No changes detected; forcing re-sync with --ignore-times"
            rclone sync ":dropbox:${SRC_PATH}" "./docs" --fast-list --ignore-times -vv
            echo "---- git status after forced re-sync ----"
            git status --porcelain=v1
          else
            echo "Changes detected; skip forced re-sync."
          fi

      # 5) Make sure GitHub treats PDFs as binary
      - name: Ensure .gitattributes for PDFs
        run: |
          {
            echo "*.pdf binary"
            echo "*.PDF binary"
          } > .gitattributes

      # 6) Normalise PDFs and verify
      - name: Normalise and verify PDFs
        run: |
          shopt -s nullglob globstar
          for f in docs/**/*.pdf docs/*.pdf docs/**/*.PDF docs/*.PDF; do
            qpdf --linearize "$f" "$f.qpdf" && mv -f "$f.qpdf" "$f"
            sig=$(hexdump -n 5 -v -e '/1 "%02X"' "$f" || true)
            mime=$(file -b --mime-type "$f" || true)
            echo "$f  sig=$sig  mime=$mime"
            if [ "$sig" != "255044462D" ] || [ "$mime" != "application/pdf" ]; then
              echo "::error::$f is not detected as a proper PDF"
              exit 1
            fi
          done

      # 7) Commit (stage deletions too) and push
      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'Docs: Auto-sync from Dropbox'
          commit_user_name: 'GitHub Actions Bot'
          commit_user_email: 'actions@github.com'
          file_pattern: |
            .gitattributes
            docs
          add_options: '--all'
